bool : U = (A : U) -> (_ : A) -> (_ : A) -> A;
true : bool = (A : U) => (x : A) => (y : A) => x;
false : bool = (A : U) => (x : A) => (y : A) => y;

nat : U = (A : U) ->  (_ : (_ : A) -> A) -> (_ : A) -> A;
zero : nat = (A : U) => (f : (_ : A) -> A) => (a : A) => a;
one  : nat = (A : U) => (f : (_ : A) -> A) => (a : A) => f a;
two  : nat = (A : U) => (f : (_ : A) -> A) => (a : A) => f (f a);
S : (_ : nat) -> nat = (n : nat) => (A : U) => (f : (_ : A) -> A) => (a : A) => f (n A f a);

modusponens : (A : U) -> (B : U) -> (_ : A) -> (_ : (_ : A) -> B) -> B
= (A : U) => (B : U) => (a : A) => (f : (_ : A) -> B) => f a;

testModusPonens : (X : U) -> (Y : U) -> (x : X) -> (g : (_ : X) -> Y) -> Y
= (A : U) => (B : U) => (a : A) => (f : (_ : A) -> B) => f a;

testApplyModusPonens : (X : U) -> (Y : U) -> (x : X) -> (g : (_ : X) -> Y) -> Y
= modusponens;

testApplyModusPonens : (X : U) -> (Y : U) -> (x : X) -> (g : (_ : X) -> Y) -> Y
= (Z : U) => modusponens Z;

testDoingRandomThings : (A : U) -> (B : (x : A) -> U) -> (a : A) -> (f : (u : A) -> B a) -> B a
= (A : U) => (B : (x : A) -> U) => (a : A) => (f : (u : A) -> B a) => f a;

testRandomVariableNames : (A : U) -> (B : U) -> (a : A) -> (f : (_ : A) -> B) -> B
= (X : U) => (Y : U) => (x : X) => (g : (_ : X) -> Y) => g x;

testUselessParentheses : (_ : ((_ : (U)) -> (U))) -> (U) = (f : ((_ : U) -> U)) => ((f) (((U))));

testTripleApplicationWithoutParenthesis : (F : (_ : U) -> (_ : U) -> U) -> (A : U) -> (B : U) -> U
= (F : (_ : U) -> (_ : U) -> U) => (A : U) => (B : U) => F A B;

A : U = (X : U) -> U;
copyA : U = A;
A : U = U;
testCopyARefersToOldA : copyA = (X : U) => X;

strangeType : U = (A : U) -> (_ : A) -> A;
definitionUnfoldingDoesntMessUp : (_ : strangeType) -> U = (n : strangeType) => U;

testApplyingIdentityDoesntMessUpTheProof : (A : U) -> (a : A) -> A
= ((x : (A : U) -> (a : A) -> A) => x) ((A : U) => (a : A) => a);

testApplyingIdentityDoesntMessUpTheProof : ((A : U) => A) U = U;

testAlphaConversion : (A : U) -> (_ : A) -> (B : U) -> A = (A : U) => (a : A) => (A : U) => a;
