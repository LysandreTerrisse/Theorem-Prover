True  : U = (A : U) -> (_ : A) -> A;
I     : True = (A : U) => (a : A) => a;
False : U = (A : U) -> A;
not   : (_ : U) -> U = (A : U) => ((_ : A) -> False);
and   : (_ : U) -> (_ : U) -> U = (A : U) => (B : U) => ((C : U) -> (_ : (_ : A) -> (_ : B) -> C) -> C);
or    : (_ : U) -> (_ : U) -> U = (A : U) => (B : U) => ((C : U) -> (_ : (_ : A) -> C) -> (_ : (_ : B) -> C) -> C);

fst : (A : U) -> (B : U) -> (_ : and A B) -> A = (A : U) => (B : U) => (ab : and A B) => ab A ((a : A) => (b : B) => a);
snd : (A : U) -> (B : U) -> (_ : and A B) -> B = (A : U) => (B : U) => (ab : and A B) => ab B ((a : A) => (b : B) => b);

bool    : U = (A : U) -> (_ : A) -> (_ : A) -> A;
true    : bool = (A : U) => (x : A) => (y : A) => x;
false   : bool = (A : U) => (x : A) => (y : A) => y;
negb    : (_ : bool) -> bool = (b : bool) => b bool false true;
andb    : (_ : bool) -> (_ : bool) -> bool = (a : bool) => (b : bool) => a bool b false;
orb     : (_ : bool) -> (_ : bool) -> bool = (a : bool) => (b : bool) => a bool true b;
eqb     : (_ : bool) -> (_ : bool) -> bool = (a : bool) => (b : bool) => a bool b (negb b);
Is_true : (_ : bool) -> U = (b : bool) => ((A : U) -> (B : U) -> (_ : b U A B) -> A);

true_is_true : Is_true true = (A : U) => (B : U) => (x : true U A B) => x;
negb_false_is_true : Is_true (negb false) = (A : U) => (B : U) => (x : (negb false) U A B) => x;
false_is_not_true : not (Is_true false) = (H : Is_true false) => H False True I;

bool_ind : U = (P : (_ : bool) -> U) -> (_ : P true) -> (_ : P false) -> (b : bool) -> P b;

eqb_refl              : U = (b : bool) -> Is_true (eqb b b);
true_eqb_true         : Is_true (eqb true true)   = true_is_true;
false_eqb_false       : Is_true (eqb false false) = true_is_true;
bool_ind_imp_eqb_refl : (_ : bool_ind) -> eqb_refl = (H : bool_ind) => H ((b : bool) => Is_true (eqb b b)) true_eqb_true false_eqb_false;

negb_involutive              : U = (b : bool) -> Is_true (eqb (negb (negb b)) b);
negb_negb_true_eqb_true      : Is_true (eqb (negb (negb true)) true)   = true_is_true;
negb_negb_false_eqb_false    : Is_true (eqb (negb (negb false)) false) = true_is_true;
bool_ind_imp_negb_involutive : (_ : bool_ind) -> negb_involutive = (H : bool_ind) => H ((b : bool) => Is_true (eqb (negb (negb b)) b)) negb_negb_true_eqb_true negb_negb_false_eqb_false;

nat : U = (A : U) ->  (_ : (_ : A) -> A) -> (_ : A) -> A;
zero : nat = (A : U) => (f : (_ : A) -> A) => (a : A) => a;
one  : nat = (A : U) => (f : (_ : A) -> A) => (a : A) => f a;
two  : nat = (A : U) => (f : (_ : A) -> A) => (a : A) => f (f a);
S : (_ : nat) -> nat = (n : nat) => (A : U) => (f : (_ : A) -> A) => (a : A) => f (n A f a);
plus : (_ : nat) -> (_ : nat) -> nat = (m : nat) => (n : nat) => (A : U) => (f : (_ : A) -> A) => (a : A) => m A f (n A f a);
mult : (_ : nat) -> (_ : nat) -> nat = (m : nat) => (n : nat) => (A : U) => (f : (_ : A) -> A) => (a : A) => m A (n A f) a;

modusponens : (A : U) -> (B : U) -> (_ : A) -> (_ : (_ : A) -> B) -> B
= (A : U) => (B : U) => (a : A) => (f : (_ : A) -> B) => f a;

testModusPonens : (X : U) -> (Y : U) -> (x : X) -> (g : (_ : X) -> Y) -> Y
= (A : U) => (B : U) => (a : A) => (f : (_ : A) -> B) => f a;

testApplyModusPonens : (X : U) -> (Y : U) -> (x : X) -> (g : (_ : X) -> Y) -> Y
= modusponens;

testApplyModusPonens : (X : U) -> (Y : U) -> (x : X) -> (g : (_ : X) -> Y) -> Y
= (Z : U) => modusponens Z;

testDoingRandomThings : (A : U) -> (B : (x : A) -> U) -> (a : A) -> (f : (u : A) -> B a) -> B a
= (A : U) => (B : (x : A) -> U) => (a : A) => (f : (u : A) -> B a) => f a;

testRandomVariableNames : (A : U) -> (B : U) -> (a : A) -> (f : (_ : A) -> B) -> B
= (X : U) => (Y : U) => (x : X) => (g : (_ : X) -> Y) => g x;

testUselessParentheses : (_ : ((_ : (U)) -> (U))) -> (U) = (f : ((_ : U) -> U)) => ((f) (((U))));

testTripleApplicationWithoutParenthesis : (F : (_ : U) -> (_ : U) -> U) -> (A : U) -> (B : U) -> U
= (F : (_ : U) -> (_ : U) -> U) => (A : U) => (B : U) => F A B;

A : U = (X : U) -> U;
copyA : U = A;
A : U = U;
testCopyARefersToOldA : copyA = (X : U) => X;

strangeType : U = (A : U) -> (_ : A) -> A;
definitionUnfoldingDoesntMessUp : (_ : strangeType) -> U = (n : strangeType) => U;

testApplyingIdentityDoesntMessUpTheProof : (A : U) -> (a : A) -> A
= ((x : (A : U) -> (a : A) -> A) => x) ((A : U) => (a : A) => a);

testApplyingIdentityDoesntMessUpTheProof : ((A : U) => A) U = U;

testAlphaConversion : (A : U) -> (_ : A) -> (B : U) -> A = (A : U) => (a : A) => (A : U) => a;
